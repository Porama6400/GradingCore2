// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: rin.proto

package protorin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RinClient is the client API for Rin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RinClient interface {
	Compile(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Bytes, error)
	Test(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Bytes, error)
	Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type rinClient struct {
	cc grpc.ClientConnInterface
}

func NewRinClient(cc grpc.ClientConnInterface) RinClient {
	return &rinClient{cc}
}

func (c *rinClient) Compile(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/Rin/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rinClient) Test(ctx context.Context, in *Source, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/Rin/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rinClient) Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Rin/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RinServer is the server API for Rin service.
// All implementations must embed UnimplementedRinServer
// for forward compatibility
type RinServer interface {
	Compile(context.Context, *Source) (*Bytes, error)
	Test(context.Context, *Source) (*Bytes, error)
	Shutdown(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedRinServer()
}

// UnimplementedRinServer must be embedded to have forward compatible implementations.
type UnimplementedRinServer struct {
}

func (UnimplementedRinServer) Compile(context.Context, *Source) (*Bytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedRinServer) Test(context.Context, *Source) (*Bytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedRinServer) Shutdown(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedRinServer) mustEmbedUnimplementedRinServer() {}

// UnsafeRinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RinServer will
// result in compilation errors.
type UnsafeRinServer interface {
	mustEmbedUnimplementedRinServer()
}

func RegisterRinServer(s grpc.ServiceRegistrar, srv RinServer) {
	s.RegisterService(&Rin_ServiceDesc, srv)
}

func _Rin_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rin/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinServer).Compile(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rin_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rin/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinServer).Test(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rin_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rin/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinServer).Shutdown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Rin_ServiceDesc is the grpc.ServiceDesc for Rin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Rin",
	HandlerType: (*RinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _Rin_Compile_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Rin_Test_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Rin_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rin.proto",
}
